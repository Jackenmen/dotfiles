# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

font_family      Source Code Pro Regular
bold_font        Source Code Pro Bold
italic_font      Source Code Pro Italic
bold_italic_font Source Code Pro Bold Italic

font_size 11.0

#: Font size (in pts)

#: }}}

#: Cursor customization {{{

cursor #ff0018

#: Default cursor color

cursor_text_color #fffaf4

#: Choose the color of text under the cursor. If you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background

cursor_shape block

#: The cursor shape can be one of (block, beam, underline). Note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal.

#: }}}


#: Mouse {{{

url_color #ffffff
url_style single

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

click_interval 0.15

#: Mouse actions {{{

#: If you want to unmap an action map it to ``no-op``. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed no-op

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

mouse_map left            click ungrabbed mouse_handle_click selection prompt
mouse_map right        release ungrabbed paste_from_selection

#: }}}

#: }}}


#: Window layout {{{

remember_window_size  no
initial_window_width  100c
initial_window_height 30c

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

resize_in_steps yes

#: Resize the OS window in steps as large as the cells, instead of
#: with the usual pixel accuracy. Combined with an
#: initial_window_width and initial_window_height in number of cells,
#: this option can be used to keep the margins as small as possible
#: when resizing the OS window. Note that this does not currently work
#: on Wayland.

confirm_os_window_close 1

#: Ask for confirmation when closing an OS window or a tab that has at
#: least this number of kitty windows in it. A value of zero disables
#: confirmation. This confirmation also applies to requests to quit
#: the entire application (all OS windows, via the quit action).

#: }}}


#: Color scheme {{{

foreground #fffaf4
background #0e1019

#: The foreground and background colors

# selection_foreground #000000

#: The foreground for text selected with the mouse. A value of none
#: means to leave the color unchanged.

selection_background #9e9c9a

#: The background for text selected with the mouse.

#: The color table {{{

#: The 256 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. You can set the
#: remaining 240 colors as color16 to color255.

color0 #232323
color8 #444444

#: black

color1 #ff000f
color9 #ff2740

#: red

color2  #8ce10b
color10 #abe15b

#: green

color3  #ffb900
color11 #ffd242

#: yellow

color4  #008df8
color12 #0092ff

#: blue

color5  #6d43a6
color13 #9a5feb

#: magenta

color6  #00d8eb
color14 #67fff0

#: cyan

color7  #dddddd
color15 #ffffff

#: white

# mark1_foreground black

#: Color for marks of type 1

# mark1_background #98d3cb

#: Color for marks of type 1 (light steel blue)

# mark2_foreground black

#: Color for marks of type 2

# mark2_background #f2dcd3

#: Color for marks of type 1 (beige)

# mark3_foreground black

#: Color for marks of type 3

# mark3_background #f274bc

#: Color for marks of type 3 (violet)

#: }}}

#: }}}

#: Advanced {{{

allow_remote_control socket-only

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc.  Note that this even works over ssh
#: connections. You can chose to either allow any program running
#: within kitty to control it, with yes or only programs that connect
#: to the socket specified with the kitty --listen-on command line
#: option, if you use the value socket-only. The latter is useful if
#: you want to prevent programs running on a remote computer over ssh
#: from controlling kitty. Reloading the config will not affect this
#: setting.

listen_on unix:@mykitty

#: Tell kitty to listen to the specified unix/tcp socket for remote
#: control connections. Note that this will apply to all kitty
#: instances. It can be overridden by the kitty --listen-on command
#: line flag. This option accepts only UNIX sockets, such as
#: unix:${TEMP}/mykitty or (on Linux) unix:@mykitty. Environment
#: variables are expanded. If {kitty_pid} is present then it is
#: replaced by the PID of the kitty process, otherwise the PID of the
#: kitty process is appended to the value, with a hyphen. This option
#: is ignored unless you also set allow_remote_control to enable
#: remote control. See the help for kitty --listen-on for more
#: details. Changing this option by reloading the config is not
#: supported.

shell_integration no-rc

#: Enable shell integration on supported shells. This enables features
#: such as jumping to previous prompts, browsing the output of the
#: previous command in a pager, etc. on supported shells.  Set to
#: ``disabled`` to turn off shell integration, completely. See
#: https://sw.kovidgoyal.net/kitty/shell-integration/ for details.

#: }}}


#: Keyboard shortcuts {{{

#: Scrolling {{{

#: You can pipe the contents of the current screen + history buffer as
#: STDIN to an arbitrary program using the ``launch`` function. For
#: example, the following opens the scrollback buffer in fzf in an
#: overlay window::

map ctrl+shift+f launch --type=overlay --stdin-source=@screen_scrollback /usr/bin/fzf --no-sort --no-mouse --exact -i --tac

#: For more details on piping screen and buffer contents to external
#: programs, see launch.

#: }}}

#: Tab management {{{

map kitty_mod+t     new_tab_with_cwd !neighbor

#: }}}

#: }}}
